version: '3.8'

services:
  # The ASP.NET Core API service
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: expensesplit-api
    ports:
      - "5238:8080" # Map host port 5238 to container port 8080
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://*:8080
      # Override the connection string to use the Docker DNS name 'mysql-db'
      - ConnectionStrings__DefaultConnection=server=mysql-db;port=3306;database=expensesplit_db;user=roshan;password=Roshan
      - Jwt__Key=8Xj7p2wFkZt1yM5GvHc9bRsD4qN6pLzW
      - Jwt__Issuer=ExpenseSplitBackend
      - Jwt__Audience=ExpenseSplitUsers
      - Jwt__ExpiryMinutes=60
      - AWS__Region=us-east-1
      - AWS__S3BucketName=expensesplit-roshan-s3
      - AWS__SNSTopicArn=arn:aws:sns:us-east-1:664418991085:expensesplit-roshan-sns
    depends_on:
      mysql-db:
        condition: service_healthy
    networks:
      - expensesplit-network

  # The MySQL database service
  mysql-db:
    image: mysql:8.0
    container_name: expensesplit-mysql
    ports:
      - "3306:3306"
    command:
      - --default-authentication-plugin=mysql_native_password
      - --skip-name-resolve
      - --performance_schema=0
      - --innodb_buffer_pool_size=64M
    environment:
      - MYSQL_ROOT_PASSWORD=roshan
      - MYSQL_DATABASE=expensesplit_db
      - MYSQL_USER=roshan
      - MYSQL_PASSWORD=Roshan
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - expensesplit-network
    # Healthcheck to ensure API doesn't start before DB is ready
    healthcheck:
      # Corrected: Use the correct root password 'roshan'
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proshan"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  expensesplit-network:
    driver: bridge

volumes:
  mysql-data: